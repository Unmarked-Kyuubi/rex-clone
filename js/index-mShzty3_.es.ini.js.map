{"version":3,"file":"index-mShzty3_.es.ini.js","sources":["../../src/js/main.js"],"sourcesContent":["const faqFlyout = document.querySelector(\".faq__flyout\");\nconst kingRex = document.querySelector(\"[data-rex-about]\");\nconst skullsRight = document.querySelector(\"[data-skulls-right]\");\nconst skullsLeft = document.querySelector(\"[data-skulls-left]\");\n\n// const handleScrollY = (entry, threshold) => {\n// \tconst { top, height } = entry.getBoundingClientRect();\n// \tconst windowHeight = window.innerHeight;\n// \tlet scrollProgress;\n\n// \tif (top < windowHeight && top + height > 0) {\n// \t\t\tscrollProgress = ((windowHeight - top) / (height + windowHeight)) * threshold;\n// \t} else if (top + height < 0) {\n// \t\t\tscrollProgress = 0;\n// \t} else {\n// \t\t\tscrollProgress = threshold;\n// \t}\n\n// \tentry.style.transform = `translateY(-${scrollProgress}%)`;\n// \tconsole.log(`translate: ${scrollProgress}`);\n// };\n\n// const observerOptions = {\n// \tthreshold: [0, 0.5, 1], // Trigger when at least 50% of the element is visible\n// \trootMargin: \"-50px\" // Trigger when at least 50% of the element is visible\n// };\n\n// const observerCallback = (entries, observer) => {\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             const { target } = entry;\n//             if (target === kingRex) {\n// \t\t\t\t\t\t\twindow.addEventListener(\"scroll\", handleScrollY(kingRex, 50));\n//             } else if (target === skullsLeft || target === skullsRight) {\n// \t\t\t\t\t\t\twindow.addEventListener(\"scroll\", handleScrollY(target, 75));\n//             }\n//         } else {\n// \t\t\t\t\twindow.removeEventListenerEventListener(\"scroll\", handleScrollY(kingRex, 75))\n// \t\t\t\t\twindow.removeEventListenerEventListener(\"scroll\", handleScrollY(skullsLeft, 75))\n// \t\t\t\t\twindow.removeEventListenerEventListener(\"scroll\", handleScrollY(skullsRight, 75))\n// \t\t\t\t}\n//     });\n// };\n\n// const observer = new IntersectionObserver(observerCallback, observerOptions);\n\n// // Observe all relevant elements\n// observer.observe(kingRex);\n// observer.observe(skullsLeft);\n// observer.observe(skullsRight);\n\n// Handle X axis scroll\nconst handleScrollX = () => {\n    const { top, height } = faqFlyout.getBoundingClientRect();\n    const windowHeight = window.innerHeight;\n    let scrollProgress;\n\n    if (top < windowHeight && top + height > 0) {\n        scrollProgress = ((windowHeight - top) / (height + windowHeight)) * 100;\n    } else if (top + height < 0) {\n        scrollProgress = 0;\n    } else {\n        scrollProgress = 100;\n    }\n\n    faqFlyout.style.transform = `translateX(${scrollProgress}%)`;\n    console.log(`translate: ${scrollProgress}`);\n};\n\n// Intersection observer for X axis\nconst observerX = new IntersectionObserver(\n    (entries) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                window.addEventListener(\"scroll\", handleScrollX);\n            } else {\n                window.removeEventListener(\"scroll\", handleScrollX);\n            }\n        });\n    },\n    { rootMargin: \"0px 0px 0% 0px\" }\n);\n\n// Observe faqFlyout for X axis scroll\nobserverX.observe(faqFlyout);\n\n// KING REX\n\n// const observerAbout = new IntersectionObserver(\n// \t(entries) => {\n// \t\tentries.forEach((entry) => {\n// \t\t\tif (entry.isIntersecting) {\n// \t\t\t\twindow.addEventListener(\"scroll\", handleScroll)\n// \t\t\t} else {\n// \t\t\t\twindow.removeEventListener(\"scroll\", handleScroll)\n// \t\t\t}\n// \t\t})\n// \t},\n// \t{ rootMargin: \"0px 0px 0% 0px\" },\n// )\n\n// observer.observe(faqFlyout)\n\nconst copyTextContainer = document.querySelector(\".copied__text\")\n// function decreaseWidthOverTime(element, durationInSeconds) {\n\n// \tcopyTextContainer.classList.add(\"copied__text--active\")\n// \t// Get the initial width of the element\n// \tlet initialWidth = element.offsetWidth\n\n// \t// Calculate the width to decrement per interval\n// \tconst decrementAmount = initialWidth / ((durationInSeconds * 1000) / 50) // Assuming 50 steps per second\n\n// \t// Set up the interval\n// \tconst interval = setInterval(function () {\n// \t\t// Subtract the decrement amount from the current width\n// \t\tinitialWidth -= decrementAmount\n\n// \t\t// Ensure the width is not negative\n// \t\tif (initialWidth <= 0) {\n// \t\t\tclearInterval(interval) // Stop the interval when width reaches 0\n// \t\t\telement.style.width = \"0px\" // Ensure width is exactly 0\n// \t\t} else {\n// \t\t\t// Set the new width of the element\n// \t\t\telement.style.width = `${initialWidth}px`\n// \t\t}\n// \t}, 20) // Interval set to 20 milliseconds (50 steps per second)\n\n// }\n\n// Get the text field\nconst copyText = document.querySelector(\".token__test\").textContent\nconst copyButton = document.querySelector(\".token__btn\")\nconst copyTimer = document.querySelector(\".copied__text-timer\")\n\ncopyButton.addEventListener(\"click\", () => {\n\tconsole.log(copyText)\n\n\t// Copy the text inside the text field\n\tnavigator.clipboard.writeText(copyText)\n\n\t// Alert the copied text\n\t// alert(`Copied the text: ${copyText}`)\n\tdocument.querySelector(\".copied__text-main\").textContent =\n\t\t`Copied text: ${copyText}`\n\n\t// decreaseWidthOverTime(copyTimer, 4)\n\t// copyTextContainer.classList.add(\".copied__text-timer\")\n\n\tcopyTextContainer.classList.add(\"copied__text--active\")\n\n\tsetTimeout(function () {\n\t\tcopyTextContainer.classList.remove(\"copied__text--active\")\n\t}, 2000) // 2000 milliseconds = 2 seconds\n})\n\n// Example usage:\n// Assuming you have an element with id \"myElement\"\n\n// Decrease the width of \"myElement\" over 2 seconds\n\n// MUSIC\n\n\n// Ensure the script runs after the DOM has loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n\n  // Get a reference to the button element using its class\n  const startButton = document.querySelector(\"[data-continue]\");\n\tdocument.querySelector(\".loaded\").classList.remove(\"loaded--inactive\")\n\n  // Add a click event listener to the button\n  startButton.addEventListener(\"click\", function(event) {\n    // event.preventDefault(); // prevent any default action of the anchor tag\n\n\t\tdocument.querySelector(\".loaded\").classList.add(\"loaded--inactive\")\n\n    // Create an audio element\n    const audio = new Audio(\"../assets/dino.mp3\");\n\n    // Enable looping for the audio, if desired\n    audio.loop = true;\n\n    // Play the audio file\n    audio.play();\n  });\n\n});\n\n\n"],"names":["faqFlyout","handleScrollX","top","height","windowHeight","scrollProgress","observerX","entries","entry","copyTextContainer","copyText","copyButton","startButton","event","audio"],"mappings":"ssBAAA,MAAMA,EAAY,SAAS,cAAc,cAAc,EACvC,SAAS,cAAc,kBAAkB,EACrC,SAAS,cAAc,qBAAqB,EAC7C,SAAS,cAAc,oBAAoB,EAiD9D,MAAMC,EAAgB,IAAM,CACxB,KAAM,CAAE,IAAAC,EAAK,OAAAC,CAAQ,EAAGH,EAAU,sBAAqB,EACjDI,EAAe,OAAO,YAC5B,IAAIC,EAEAH,EAAME,GAAgBF,EAAMC,EAAS,EACrCE,GAAmBD,EAAeF,IAAQC,EAASC,GAAiB,IAC7DF,EAAMC,EAAS,EACtBE,EAAiB,EAEjBA,EAAiB,IAGrBL,EAAU,MAAM,UAAY,cAAcK,CAAc,KACxD,QAAQ,IAAI,cAAcA,CAAc,EAAE,CAC9C,EAGMC,EAAY,IAAI,qBACjBC,GAAY,CACTA,EAAQ,QAASC,GAAU,CACnBA,EAAM,eACN,OAAO,iBAAiB,SAAUP,CAAa,EAE/C,OAAO,oBAAoB,SAAUA,CAAa,CAElE,CAAS,CACJ,EACD,CAAE,WAAY,gBAAkB,CACpC,EAGAK,EAAU,QAAQN,CAAS,EAmB3B,MAAMS,EAAoB,SAAS,cAAc,eAAe,EA4B1DC,EAAW,SAAS,cAAc,cAAc,EAAE,YAClDC,EAAa,SAAS,cAAc,aAAa,EACrC,SAAS,cAAc,qBAAqB,EAE9DA,EAAW,iBAAiB,QAAS,IAAM,CAC1C,QAAQ,IAAID,CAAQ,EAGpB,UAAU,UAAU,UAAUA,CAAQ,EAItC,SAAS,cAAc,oBAAoB,EAAE,YAC5C,gBAAgBA,CAAQ,GAKzBD,EAAkB,UAAU,IAAI,sBAAsB,EAEtD,WAAW,UAAY,CACtBA,EAAkB,UAAU,OAAO,sBAAsB,CACzD,EAAE,GAAI,CACR,CAAC,EAWD,SAAS,iBAAiB,mBAAoB,UAAW,CAGvD,MAAMG,EAAc,SAAS,cAAc,iBAAiB,EAC7D,SAAS,cAAc,SAAS,EAAE,UAAU,OAAO,kBAAkB,EAGpEA,EAAY,iBAAiB,QAAS,SAASC,EAAO,CAGtD,SAAS,cAAc,SAAS,EAAE,UAAU,IAAI,kBAAkB,EAGhE,MAAMC,EAAQ,IAAI,MAAM,oBAAoB,EAG5CA,EAAM,KAAO,GAGbA,EAAM,KAAI,CACd,CAAG,CAEH,CAAC"}